{"ast":null,"code":"var _jsxFileName = \"/Users/ramsses/Downloads/test/tasks/src/components/RandomTasks.js\";\nimport React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { IoMdAddCircle as AddIcon } from 'react-icons/io';\nimport { loremIpsum } from 'react-lorem-ipsum';\nimport { createManyTasks } from '../services/createManyTasks';\n\nfunction RandomTasks(props) {\n  /**\n   *\n   * @param {Integer} from numero entero\n   * @param {Integer} to numero entero\n   * -> genero un numero aleatorio entre este rango\n   */\n  const randomNumber = (from, to) => {\n    const min = from;\n    const max = to;\n    const random = Math.floor(Math.random() * (max - min)) + min;\n    return random;\n  };\n  /**\n   * Genero 50 tareas aleatorias\n   */\n\n\n  const createRandomTasks = async () => {\n    const tasksToCreate = [];\n\n    for (let x = 50; x > 0; x--) {\n      const status = 'finished'; // uso una libreria para generar un texto y una descripcion\n\n      const name = loremIpsum({\n        p: 1,\n        startWithLoremIpsum: false,\n        avgWordsPerSentence: 1,\n        avgSentencesPerParagraph: 1\n      })[0];\n      const description = loremIpsum({\n        p: 1,\n        startWithLoremIpsum: false,\n        avgWordsPerSentence: 5,\n        avgSentencesPerParagraph: 1\n      })[0]; // numero random entre 15 min y 2 hr (en segundos)\n\n      const duration = randomNumber(900, 7200); // tiempo que quedo de la duracion total ( aleatorio 0% a 20% )\n\n      const durationRemaining = Math.floor(duration * (randomNumber(0, 20) / 100)); // Semana [0, 1, 2, 3, 4, 5, 6] -> [Do, Lu, Ma, Mi, Ju, Vi, Sa]\n\n      const today = new Date(); // calculo cuantos dias hay de hoy al viernes de la ultima semana\n\n      const days = new Date().getDay() + 2 > 7 ? 1 : new Date().getDay() + 2;\n      const randomDay = randomNumber(0, 5); // dia de hoy - dias para el ultimo viernes - dias aleatorios\n\n      const finishedTime = new Date(today - 1000 * 60 * 60 * 24 * (days + randomDay)); // a que hora inicio la tarea\n\n      const startedTime = new Date(finishedTime - (duration - durationRemaining) * 1000);\n      tasksToCreate.push({\n        name,\n        description,\n        status,\n        duration,\n        durationRemaining,\n        finished_time: finishedTime,\n        started_time: startedTime\n      });\n    }\n\n    const results = await createManyTasks(tasksToCreate);\n\n    if (!results.error) {\n      props.onCreatedTasks(results.data); // Tasks.js addTasks\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(Button, {\n    variant: \"primary\",\n    onClick: createRandomTasks,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 5\n    }\n  }, \"Crear 50 tareas aleatorias \", /*#__PURE__*/React.createElement(AddIcon, {\n    style: {\n      color: 'white',\n      fontSize: '25px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 34\n    }\n  }));\n}\n\nexport default RandomTasks;","map":{"version":3,"sources":["/Users/ramsses/Downloads/test/tasks/src/components/RandomTasks.js"],"names":["React","Button","IoMdAddCircle","AddIcon","loremIpsum","createManyTasks","RandomTasks","props","randomNumber","from","to","min","max","random","Math","floor","createRandomTasks","tasksToCreate","x","status","name","p","startWithLoremIpsum","avgWordsPerSentence","avgSentencesPerParagraph","description","duration","durationRemaining","today","Date","days","getDay","randomDay","finishedTime","startedTime","push","finished_time","started_time","results","error","onCreatedTasks","data","color","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,aAAa,IAAIC,OAA1B,QAAyC,gBAAzC;AACA,SAASC,UAAT,QAA2B,mBAA3B;AAEA,SAASC,eAAT,QAAgC,6BAAhC;;AAEA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAC3B;;;;;;AAMA,QAAMC,YAAY,GAAG,CAACC,IAAD,EAAOC,EAAP,KAAc;AACjC,UAAMC,GAAG,GAAGF,IAAZ;AACA,UAAMG,GAAG,GAAGF,EAAZ;AACA,UAAMG,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,MAAiBD,GAAG,GAAGD,GAAvB,CAAX,IAA0CA,GAAzD;AACA,WAAOE,MAAP;AACD,GALD;AAOA;;;;;AAGA,QAAMG,iBAAiB,GAAG,YAAY;AACpC,UAAMC,aAAa,GAAG,EAAtB;;AACA,SAAK,IAAIC,CAAC,GAAG,EAAb,EAAiBA,CAAC,GAAG,CAArB,EAAwBA,CAAC,EAAzB,EAA6B;AAC3B,YAAMC,MAAM,GAAG,UAAf,CAD2B,CAE3B;;AACA,YAAMC,IAAI,GAAGhB,UAAU,CAAC;AAAEiB,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,mBAAmB,EAAE,KAA7B;AAAoCC,QAAAA,mBAAmB,EAAE,CAAzD;AAA4DC,QAAAA,wBAAwB,EAAE;AAAtF,OAAD,CAAV,CAAsG,CAAtG,CAAb;AACA,YAAMC,WAAW,GAAGrB,UAAU,CAAC;AAAEiB,QAAAA,CAAC,EAAE,CAAL;AAAQC,QAAAA,mBAAmB,EAAE,KAA7B;AAAoCC,QAAAA,mBAAmB,EAAE,CAAzD;AAA4DC,QAAAA,wBAAwB,EAAE;AAAtF,OAAD,CAAV,CAAsG,CAAtG,CAApB,CAJ2B,CAK3B;;AACA,YAAME,QAAQ,GAAGlB,YAAY,CAAC,GAAD,EAAM,IAAN,CAA7B,CAN2B,CAO3B;;AACA,YAAMmB,iBAAiB,GAAGb,IAAI,CAACC,KAAL,CAAWW,QAAQ,IAAIlB,YAAY,CAAC,CAAD,EAAI,EAAJ,CAAZ,GAAsB,GAA1B,CAAnB,CAA1B,CAR2B,CAU3B;;AACA,YAAMoB,KAAK,GAAG,IAAIC,IAAJ,EAAd,CAX2B,CAY3B;;AACA,YAAMC,IAAI,GAAG,IAAID,IAAJ,GAAWE,MAAX,KAAsB,CAAtB,GAA0B,CAA1B,GAA8B,CAA9B,GAAkC,IAAIF,IAAJ,GAAWE,MAAX,KAAsB,CAArE;AACA,YAAMC,SAAS,GAAGxB,YAAY,CAAC,CAAD,EAAI,CAAJ,CAA9B,CAd2B,CAe3B;;AACA,YAAMyB,YAAY,GAAG,IAAIJ,IAAJ,CAASD,KAAK,GAAI,OAAO,EAAP,GAAY,EAAZ,GAAiB,EAAjB,IAAuBE,IAAI,GAAGE,SAA9B,CAAlB,CAArB,CAhB2B,CAiB3B;;AACA,YAAME,WAAW,GAAG,IAAIL,IAAJ,CAASI,YAAY,GAAI,CAACP,QAAQ,GAAGC,iBAAZ,IAAiC,IAA1D,CAApB;AAEAV,MAAAA,aAAa,CAACkB,IAAd,CAAmB;AACjBf,QAAAA,IADiB;AAEjBK,QAAAA,WAFiB;AAGjBN,QAAAA,MAHiB;AAIjBO,QAAAA,QAJiB;AAKjBC,QAAAA,iBALiB;AAMjBS,QAAAA,aAAa,EAAEH,YANE;AAOjBI,QAAAA,YAAY,EAAEH;AAPG,OAAnB;AASD;;AACD,UAAMI,OAAO,GAAG,MAAMjC,eAAe,CAACY,aAAD,CAArC;;AACA,QAAI,CAACqB,OAAO,CAACC,KAAb,EAAoB;AAClBhC,MAAAA,KAAK,CAACiC,cAAN,CAAqBF,OAAO,CAACG,IAA7B,EADkB,CACkB;AACrC;AACF,GApCD;;AAsCA,sBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAEzB,iBAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iDAC6B,oBAAC,OAAD;AAAS,IAAA,KAAK,EAAE;AAAE0B,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD7B,CADF;AAKD;;AAED,eAAerC,WAAf","sourcesContent":["import React from 'react';\nimport { Button } from 'react-bootstrap';\nimport { IoMdAddCircle as AddIcon } from 'react-icons/io';\nimport { loremIpsum } from 'react-lorem-ipsum';\n\nimport { createManyTasks } from '../services/createManyTasks';\n\nfunction RandomTasks (props) {\n  /**\n   *\n   * @param {Integer} from numero entero\n   * @param {Integer} to numero entero\n   * -> genero un numero aleatorio entre este rango\n   */\n  const randomNumber = (from, to) => {\n    const min = from;\n    const max = to;\n    const random = Math.floor(Math.random() * (max - min)) + min;\n    return random;\n  };\n\n  /**\n   * Genero 50 tareas aleatorias\n   */\n  const createRandomTasks = async () => {\n    const tasksToCreate = [];\n    for (let x = 50; x > 0; x--) {\n      const status = 'finished';\n      // uso una libreria para generar un texto y una descripcion\n      const name = loremIpsum({ p: 1, startWithLoremIpsum: false, avgWordsPerSentence: 1, avgSentencesPerParagraph: 1 })[0];\n      const description = loremIpsum({ p: 1, startWithLoremIpsum: false, avgWordsPerSentence: 5, avgSentencesPerParagraph: 1 })[0];\n      // numero random entre 15 min y 2 hr (en segundos)\n      const duration = randomNumber(900, 7200);\n      // tiempo que quedo de la duracion total ( aleatorio 0% a 20% )\n      const durationRemaining = Math.floor(duration * (randomNumber(0, 20) / 100));\n\n      // Semana [0, 1, 2, 3, 4, 5, 6] -> [Do, Lu, Ma, Mi, Ju, Vi, Sa]\n      const today = new Date();\n      // calculo cuantos dias hay de hoy al viernes de la ultima semana\n      const days = new Date().getDay() + 2 > 7 ? 1 : new Date().getDay() + 2;\n      const randomDay = randomNumber(0, 5);\n      // dia de hoy - dias para el ultimo viernes - dias aleatorios\n      const finishedTime = new Date(today - (1000 * 60 * 60 * 24 * (days + randomDay)));\n      // a que hora inicio la tarea\n      const startedTime = new Date(finishedTime - ((duration - durationRemaining) * 1000));\n\n      tasksToCreate.push({\n        name,\n        description,\n        status,\n        duration,\n        durationRemaining,\n        finished_time: finishedTime,\n        started_time: startedTime\n      });\n    }\n    const results = await createManyTasks(tasksToCreate);\n    if (!results.error) {\n      props.onCreatedTasks(results.data); // Tasks.js addTasks\n    }\n  };\n\n  return (\n    <Button variant='primary' onClick={createRandomTasks}>\n      Crear 50 tareas aleatorias <AddIcon style={{ color: 'white', fontSize: '25px' }} />\n    </Button>\n  );\n}\n\nexport default RandomTasks;\n"]},"metadata":{},"sourceType":"module"}