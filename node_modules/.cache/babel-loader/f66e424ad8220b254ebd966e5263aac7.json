{"ast":null,"code":"export default function () {\n  /**\n   * \n   * @param {integer} seconds \n   * representa segundos\n   * desde 60 (1 minuto) hasta 7200 (2 horas)\n   */\n  function formatToMinutesSeconds(seconds) {\n    /**\n     * -> total de segundos ENTRE segundos que tiene 1 hora redondeando hacia abajo\n     * y entonces obtenemos la cantidad de horas\n     */\n    const hr = Math.floor(seconds / 3600);\n    /**\n     * -> total de segundos ENTRE segundos que tiene 1 minuto redondeando hacia abajo\n     * y entonces obtenemos la cantidad de minutos\n     * -> A este le restamos: resultado de \"hr\" POR minutos que tiene 1 hora\n     * y entonces obtenemos el total de minutos restantes\n     */\n\n    const min = Math.floor(seconds / 60) - hr * 60;\n    /**\n     * -> ((min + (hr * 60)) * 60) es el calculo de total de segundos ya ocurridos\n     * restandoselos a total de segundos y obtenemos los segundos que quedan.\n     */\n\n    const sec = seconds - (min + hr * 60) * 60;\n    let format = '';\n    if (hr) format += `${hr} hr `;\n    if (min) format += `${min} min `;\n    if (sec) format += `${sec} seg`;\n    return format;\n  }\n  /**\n   * \n   * @param {integer} seconds 0 - 7200\n   * * retorno los filtros validos para una duracion especifica\n   */\n\n\n  function getFilterId(seconds) {\n    const [thirtyMinutes, sixtyMinutes] = [30 * 60, 60 * 60];\n    const validFilters = [1];\n    if (seconds > sixtyMinutes) validFilters.push(4);\n    if (seconds >= thirtyMinutes && seconds <= sixtyMinutes) validFilters.push(3);\n    if (seconds <= sixtyMinutes) validFilters.push(2);\n    return validFilters;\n  }\n\n  return {\n    formatToMinutesSeconds,\n    getFilterId\n  };\n}","map":{"version":3,"sources":["/Users/ramsses/programacion/EXAMENES/tasks/src/helpers/utils.js"],"names":["formatToMinutesSeconds","seconds","hr","Math","floor","min","sec","format","getFilterId","thirtyMinutes","sixtyMinutes","validFilters","push"],"mappings":"AAAA,eAAe,YAAY;AACzB;;;;;;AAMA,WAASA,sBAAT,CAAiCC,OAAjC,EAA0C;AACxC;;;;AAIA,UAAMC,EAAE,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,IAArB,CAAX;AACA;;;;;;;AAMA,UAAMI,GAAG,GAAGF,IAAI,CAACC,KAAL,CAAWH,OAAO,GAAG,EAArB,IAA4BC,EAAE,GAAG,EAA7C;AACA;;;;;AAIA,UAAMI,GAAG,GAAGL,OAAO,GAAI,CAACI,GAAG,GAAIH,EAAE,GAAG,EAAb,IAAoB,EAA3C;AACA,QAAIK,MAAM,GAAG,EAAb;AACA,QAAIL,EAAJ,EAAQK,MAAM,IAAK,GAAEL,EAAG,MAAhB;AACR,QAAIG,GAAJ,EAASE,MAAM,IAAK,GAAEF,GAAI,OAAjB;AACT,QAAIC,GAAJ,EAASC,MAAM,IAAK,GAAED,GAAI,MAAjB;AACT,WAAOC,MAAP;AACD;AAED;;;;;;;AAKA,WAASC,WAAT,CAAsBP,OAAtB,EAA+B;AAC7B,UAAM,CAAEQ,aAAF,EAAiBC,YAAjB,IAAkC,CAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,CAAxC;AACA,UAAMC,YAAY,GAAG,CAAC,CAAD,CAArB;AACA,QAAIV,OAAO,GAAGS,YAAd,EAA4BC,YAAY,CAACC,IAAb,CAAkB,CAAlB;AAC5B,QAAIX,OAAO,IAAIQ,aAAX,IAA4BR,OAAO,IAAIS,YAA3C,EAAyDC,YAAY,CAACC,IAAb,CAAkB,CAAlB;AACzD,QAAIX,OAAO,IAAIS,YAAf,EAA6BC,YAAY,CAACC,IAAb,CAAkB,CAAlB;AAC7B,WAAOD,YAAP;AACD;;AAED,SAAO;AACLX,IAAAA,sBADK;AAELQ,IAAAA;AAFK,GAAP;AAID","sourcesContent":["export default function () {\n  /**\n   * \n   * @param {integer} seconds \n   * representa segundos\n   * desde 60 (1 minuto) hasta 7200 (2 horas)\n   */\n  function formatToMinutesSeconds (seconds) {\n    /**\n     * -> total de segundos ENTRE segundos que tiene 1 hora redondeando hacia abajo\n     * y entonces obtenemos la cantidad de horas\n     */\n    const hr = Math.floor(seconds / 3600);\n    /**\n     * -> total de segundos ENTRE segundos que tiene 1 minuto redondeando hacia abajo\n     * y entonces obtenemos la cantidad de minutos\n     * -> A este le restamos: resultado de \"hr\" POR minutos que tiene 1 hora\n     * y entonces obtenemos el total de minutos restantes\n     */\n    const min = Math.floor(seconds / 60) - (hr * 60);\n    /**\n     * -> ((min + (hr * 60)) * 60) es el calculo de total de segundos ya ocurridos\n     * restandoselos a total de segundos y obtenemos los segundos que quedan.\n     */\n    const sec = seconds - ((min + (hr * 60)) * 60);\n    let format = '';\n    if (hr) format += `${hr} hr `;\n    if (min) format += `${min} min `;\n    if (sec) format += `${sec} seg`;\n    return format;\n  }\n\n  /**\n   * \n   * @param {integer} seconds 0 - 7200\n   * * retorno los filtros validos para una duracion especifica\n   */\n  function getFilterId (seconds) {\n    const [ thirtyMinutes, sixtyMinutes ] = [ 30 * 60, 60 * 60 ];\n    const validFilters = [1];\n    if (seconds > sixtyMinutes) validFilters.push(4);\n    if (seconds >= thirtyMinutes && seconds <= sixtyMinutes) validFilters.push(3);\n    if (seconds <= sixtyMinutes) validFilters.push(2);\n    return validFilters;\n  }\n\n  return {\n    formatToMinutesSeconds,\n    getFilterId\n  }\n}"]},"metadata":{},"sourceType":"module"}