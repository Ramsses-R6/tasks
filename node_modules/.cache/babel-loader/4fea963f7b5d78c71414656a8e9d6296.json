{"ast":null,"code":"var _jsxFileName = \"/Users/ramsses/programacion/EXAMENES/tasks/src/components/TaskFieldTimer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { FaPlay as PlayIcon, FaPause as PauseIcon } from 'react-icons/fa';\nimport { MdRefresh as RefreshIcon } from 'react-icons/md';\nimport { updateTasks } from '../services/updateTasks';\nimport utils from '../helpers/utils';\n\nfunction TaskFieldTimer(props) {\n  const [seconds, setSeconds] = useState(props.task.durationRemaining);\n  const [isRunning, setIsRunning] = useState(props.task.status === 'started');\n  /**\n   * pauso o iniciop el temporizador\n   */\n\n  function pauseStart() {\n    props.editTask({\n      id: props.task.id,\n      status: isRunning ? 'paused' : 'started',\n      durationRemaining: seconds\n    });\n    setIsRunning(!isRunning);\n  }\n  /**\n   * reinicio el temporizador\n   */\n\n\n  function reset() {\n    setSeconds(props.task.duration);\n    setIsRunning(false);\n    props.editTask({\n      id: props.task.id,\n      status: 'paused',\n      durationRemaining: props.task.duration\n    });\n  }\n  /**\n   * \n   * @param {Object} e evento de ventana\n   * -> antes de salir de la ventna, pauso la tarea\n   */\n\n\n  function outFromWindow(e) {\n    e.preventDefault();\n    window.removeEventListener('beforeunload', outFromWindow);\n\n    if (isRunning) {\n      updateTasks({\n        id: props.task.id,\n        status: seconds ? 'paused' : 'finished',\n        durationRemaining: seconds\n      });\n    }\n\n    return true;\n  }\n  /**\n   * hook para temporizador\n   */\n\n\n  useEffect(() => {\n    let interval = null;\n\n    if (seconds === 0) {\n      // si llega a 0 detenemos el intervalo y actualizamos\n      clearInterval(interval);\n      finalizeTask();\n    }\n\n    if (isRunning) {\n      // si esta en corriendo vamos quitando segundos\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n    }\n\n    if (!isRunning && seconds !== 0) {\n      // si se pausa para detener el intervalo\n      clearInterval(interval);\n    }\n\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isRunning, seconds]);\n  /**\n   * hook para escuchar cuando se sale de la ventana\n   */\n\n  useEffect(() => {\n    window[`${props.task.id}_${props.task.name}_seconds`] = seconds;\n    window[`${props.task.id}_${props.task.name}_isRunning`] = isRunning;\n    window.addEventListener('beforeunload', outFromWindow);\n    return () => {\n      return window.removeEventListener('beforeunload', outFromWindow);\n    };\n  }, [isRunning, seconds]);\n  /**\n   * hook para pausar la tarea si se desmonta el componente\n   */\n\n  useEffect(function () {\n    return () => {\n      const isRunning = window[`${props.task.id}_${props.task.name}_isRunning`];\n      const seconds = window[`${props.task.id}_${props.task.name}_seconds`];\n\n      if (isRunning) {\n        updateTasks({\n          id: props.task.id,\n          status: seconds ? 'paused' : 'finished',\n          durationRemaining: seconds\n        });\n      }\n\n      return true;\n    };\n  }, []);\n  /**\n   * Finaliza la tarea\n   */\n\n  async function finalizeTask() {\n    window.removeEventListener('beforeunload', outFromWindow);\n    const updated = await updateTasks({\n      id: props.task.id,\n      status: 'finished',\n      durationRemaining: seconds\n    });\n\n    if (!updated.error) {\n      const newTask = props.task;\n      newTask.status = 'finished';\n      newTask.durationRemaining = seconds;\n      props.onFinishedTask(newTask, props.listName, 'tasksFinished'); // Tasks.js -> moveTask\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, !!seconds && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: pauseStart,\n    variant: \"dark\",\n    style: {\n      marginRight: '5px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, isRunning && /*#__PURE__*/React.createElement(PauseIcon, {\n    style: {\n      color: 'white',\n      fontSize: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 15\n    }\n  }), !isRunning && /*#__PURE__*/React.createElement(PlayIcon, {\n    style: {\n      color: 'white',\n      fontSize: '10px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    onClick: reset,\n    variant: \"light\",\n    style: {\n      marginRight: '5px',\n      padding: '3px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(RefreshIcon, {\n    style: {\n      color: 'black',\n      fontSize: '30px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    variant: \"success\",\n    onClick: finalizeTask,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \"Finalizar\")), /*#__PURE__*/React.createElement(Card.Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }\n  }, !!seconds && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 11\n    }\n  }, \"tiempo restante: \", utils().formatToMinutesSeconds(seconds)), !seconds && /*#__PURE__*/React.createElement(\"small\", {\n    className: \"text-muted\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 11\n    }\n  }, \"completada\")));\n}\n\nexport default TaskFieldTimer;","map":{"version":3,"sources":["/Users/ramsses/programacion/EXAMENES/tasks/src/components/TaskFieldTimer.js"],"names":["React","useState","useEffect","Card","Button","FaPlay","PlayIcon","FaPause","PauseIcon","MdRefresh","RefreshIcon","updateTasks","utils","TaskFieldTimer","props","seconds","setSeconds","task","durationRemaining","isRunning","setIsRunning","status","pauseStart","editTask","id","reset","duration","outFromWindow","e","preventDefault","window","removeEventListener","interval","clearInterval","finalizeTask","setInterval","name","addEventListener","updated","error","newTask","onFinishedTask","listName","marginRight","color","fontSize","padding","formatToMinutesSeconds"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,iBAA7B;AACA,SAASC,MAAM,IAAIC,QAAnB,EAA6BC,OAAO,IAAIC,SAAxC,QAAyD,gBAAzD;AACA,SAASC,SAAS,IAAIC,WAAtB,QAAyC,gBAAzC;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,KAAP,MAAkB,kBAAlB;;AAEA,SAASC,cAAT,CAAyBC,KAAzB,EAAgC;AAC9B,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAACa,KAAK,CAACG,IAAN,CAAWC,iBAAZ,CAAtC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAACa,KAAK,CAACG,IAAN,CAAWI,MAAX,KAAsB,SAAvB,CAA1C;AAEA;;;;AAGA,WAASC,UAAT,GAAuB;AACrBR,IAAAA,KAAK,CAACS,QAAN,CAAe;AACbC,MAAAA,EAAE,EAAEV,KAAK,CAACG,IAAN,CAAWO,EADF;AAEbH,MAAAA,MAAM,EAAEF,SAAS,GAAG,QAAH,GAAc,SAFlB;AAGbD,MAAAA,iBAAiB,EAAEH;AAHN,KAAf;AAKAK,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACD;AAED;;;;;AAGA,WAASM,KAAT,GAAkB;AAChBT,IAAAA,UAAU,CAACF,KAAK,CAACG,IAAN,CAAWS,QAAZ,CAAV;AACAN,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAN,IAAAA,KAAK,CAACS,QAAN,CAAe;AACbC,MAAAA,EAAE,EAAEV,KAAK,CAACG,IAAN,CAAWO,EADF;AAEbH,MAAAA,MAAM,EAAE,QAFK;AAGbH,MAAAA,iBAAiB,EAAEJ,KAAK,CAACG,IAAN,CAAWS;AAHjB,KAAf;AAKD;AAED;;;;;;;AAKA,WAASC,aAAT,CAAwBC,CAAxB,EAA2B;AACzBA,IAAAA,CAAC,CAACC,cAAF;AACAC,IAAAA,MAAM,CAACC,mBAAP,CAA2B,cAA3B,EAA2CJ,aAA3C;;AACA,QAAIR,SAAJ,EAAe;AACbR,MAAAA,WAAW,CAAC;AACVa,QAAAA,EAAE,EAAEV,KAAK,CAACG,IAAN,CAAWO,EADL;AAEVH,QAAAA,MAAM,EAAEN,OAAO,GAAG,QAAH,GAAc,UAFnB;AAGVG,QAAAA,iBAAiB,EAAEH;AAHT,OAAD,CAAX;AAKD;;AACD,WAAO,IAAP;AACD;AAED;;;;;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,QAAQ,GAAG,IAAf;;AACA,QAAIjB,OAAO,KAAK,CAAhB,EAAmB;AAAE;AACnBkB,MAAAA,aAAa,CAACD,QAAD,CAAb;AACAE,MAAAA,YAAY;AACb;;AACD,QAAIf,SAAJ,EAAe;AAAE;AACfa,MAAAA,QAAQ,GAAGG,WAAW,CAAC,MAAM;AAC3BnB,QAAAA,UAAU,CAACD,OAAO,IAAIA,OAAO,GAAG,CAAtB,CAAV;AACD,OAFqB,EAEnB,IAFmB,CAAtB;AAGD;;AACD,QAAI,CAACI,SAAD,IAAcJ,OAAO,KAAK,CAA9B,EAAiC;AAAE;AACjCkB,MAAAA,aAAa,CAACD,QAAD,CAAb;AACD;;AACD,WAAO,MAAM;AACXC,MAAAA,aAAa,CAACD,QAAD,CAAb;AACD,KAFD;AAGD,GAjBQ,EAiBN,CAACb,SAAD,EAAYJ,OAAZ,CAjBM,CAAT;AAmBA;;;;AAGAb,EAAAA,SAAS,CAAC,MAAM;AACd4B,IAAAA,MAAM,CAAE,GAAEhB,KAAK,CAACG,IAAN,CAAWO,EAAG,IAAGV,KAAK,CAACG,IAAN,CAAWmB,IAAK,UAArC,CAAN,GAAwDrB,OAAxD;AACAe,IAAAA,MAAM,CAAE,GAAEhB,KAAK,CAACG,IAAN,CAAWO,EAAG,IAAGV,KAAK,CAACG,IAAN,CAAWmB,IAAK,YAArC,CAAN,GAA0DjB,SAA1D;AACAW,IAAAA,MAAM,CAACO,gBAAP,CAAwB,cAAxB,EAAwCV,aAAxC;AACA,WAAO,MAAM;AACX,aAAOG,MAAM,CAACC,mBAAP,CAA2B,cAA3B,EAA2CJ,aAA3C,CAAP;AACD,KAFD;AAGD,GAPQ,EAON,CAACR,SAAD,EAAYJ,OAAZ,CAPM,CAAT;AASA;;;;AAGAb,EAAAA,SAAS,CAAC,YAAY;AACpB,WAAO,MAAM;AACX,YAAMiB,SAAS,GAAGW,MAAM,CAAE,GAAEhB,KAAK,CAACG,IAAN,CAAWO,EAAG,IAAGV,KAAK,CAACG,IAAN,CAAWmB,IAAK,YAArC,CAAxB;AACA,YAAMrB,OAAO,GAAGe,MAAM,CAAE,GAAEhB,KAAK,CAACG,IAAN,CAAWO,EAAG,IAAGV,KAAK,CAACG,IAAN,CAAWmB,IAAK,UAArC,CAAtB;;AACA,UAAIjB,SAAJ,EAAe;AACbR,QAAAA,WAAW,CAAC;AACVa,UAAAA,EAAE,EAAEV,KAAK,CAACG,IAAN,CAAWO,EADL;AAEVH,UAAAA,MAAM,EAAEN,OAAO,GAAG,QAAH,GAAc,UAFnB;AAGVG,UAAAA,iBAAiB,EAAEH;AAHT,SAAD,CAAX;AAKD;;AACD,aAAO,IAAP;AACD,KAXD;AAYD,GAbQ,EAaN,EAbM,CAAT;AAeA;;;;AAGA,iBAAemB,YAAf,GAA+B;AAC7BJ,IAAAA,MAAM,CAACC,mBAAP,CAA2B,cAA3B,EAA2CJ,aAA3C;AACA,UAAMW,OAAO,GAAG,MAAM3B,WAAW,CAAC;AAAEa,MAAAA,EAAE,EAAEV,KAAK,CAACG,IAAN,CAAWO,EAAjB;AAAqBH,MAAAA,MAAM,EAAE,UAA7B;AAAyCH,MAAAA,iBAAiB,EAAEH;AAA5D,KAAD,CAAjC;;AACA,QAAI,CAACuB,OAAO,CAACC,KAAb,EAAoB;AAClB,YAAMC,OAAO,GAAG1B,KAAK,CAACG,IAAtB;AACAuB,MAAAA,OAAO,CAACnB,MAAR,GAAiB,UAAjB;AACAmB,MAAAA,OAAO,CAACtB,iBAAR,GAA4BH,OAA5B;AACAD,MAAAA,KAAK,CAAC2B,cAAN,CAAqBD,OAArB,EAA8B1B,KAAK,CAAC4B,QAApC,EAA8C,eAA9C,EAJkB,CAI8C;AACjE;AACF;;AAED,sBACE,0CACG,CAAC,CAAC3B,OAAF,iBACC,uDACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEO,UAAjB;AAA6B,IAAA,OAAO,EAAC,MAArC;AAA4C,IAAA,KAAK,EAAE;AAAEqB,MAAAA,WAAW,EAAE;AAAf,KAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,SAAS,iBACR,oBAAC,SAAD;AAAW,IAAA,KAAK,EAAE;AAAEyB,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,EAIG,CAAC1B,SAAD,iBACC,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE;AAAEyB,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF,eASE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEpB,KAAjB;AAAwB,IAAA,OAAO,EAAC,OAAhC;AAAwC,IAAA,KAAK,EAAE;AAAEkB,MAAAA,WAAW,EAAE,KAAf;AAAsBG,MAAAA,OAAO,EAAE;AAA/B,KAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAa,IAAA,KAAK,EAAE;AAAEF,MAAAA,KAAK,EAAE,OAAT;AAAkBC,MAAAA,QAAQ,EAAE;AAA5B,KAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,eAYE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAC,SAAhB;AAA0B,IAAA,OAAO,EAAEX,YAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAZF,CAFJ,eAmBE,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAC,CAACnB,OAAF,iBACC;AAAO,IAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BAAgDH,KAAK,GAAGmC,sBAAR,CAA+BhC,OAA/B,CAAhD,CAFJ,EAIG,CAACA,OAAD,iBACC;AAAO,IAAA,SAAS,EAAC,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBALJ,CAnBF,CADF;AA8BD;;AAED,eAAeF,cAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { FaPlay as PlayIcon, FaPause as PauseIcon } from 'react-icons/fa';\nimport { MdRefresh as RefreshIcon } from 'react-icons/md';\n\nimport { updateTasks } from '../services/updateTasks';\nimport utils from '../helpers/utils';\n\nfunction TaskFieldTimer (props) {\n  const [seconds, setSeconds] = useState(props.task.durationRemaining);\n  const [isRunning, setIsRunning] = useState(props.task.status === 'started');\n\n  /**\n   * pauso o iniciop el temporizador\n   */\n  function pauseStart () {\n    props.editTask({\n      id: props.task.id,\n      status: isRunning ? 'paused' : 'started',\n      durationRemaining: seconds\n    });\n    setIsRunning(!isRunning);\n  }\n\n  /**\n   * reinicio el temporizador\n   */\n  function reset () {\n    setSeconds(props.task.duration);\n    setIsRunning(false);\n    props.editTask({\n      id: props.task.id,\n      status: 'paused',\n      durationRemaining: props.task.duration\n    });\n  }\n\n  /**\n   * \n   * @param {Object} e evento de ventana\n   * -> antes de salir de la ventna, pauso la tarea\n   */\n  function outFromWindow (e) {\n    e.preventDefault();\n    window.removeEventListener('beforeunload', outFromWindow);\n    if (isRunning) {\n      updateTasks({\n        id: props.task.id,\n        status: seconds ? 'paused' : 'finished',\n        durationRemaining: seconds\n      });\n    }\n    return true;\n  }\n\n  /**\n   * hook para temporizador\n   */\n  useEffect(() => {\n    let interval = null;\n    if (seconds === 0) { // si llega a 0 detenemos el intervalo y actualizamos\n      clearInterval(interval);\n      finalizeTask();\n    }\n    if (isRunning) { // si esta en corriendo vamos quitando segundos\n      interval = setInterval(() => {\n        setSeconds(seconds => seconds - 1);\n      }, 1000);\n    }\n    if (!isRunning && seconds !== 0) { // si se pausa para detener el intervalo\n      clearInterval(interval);\n    }\n    return () => {\n      clearInterval(interval);\n    };\n  }, [isRunning, seconds]);\n\n  /**\n   * hook para escuchar cuando se sale de la ventana\n   */\n  useEffect(() => {\n    window[`${props.task.id}_${props.task.name}_seconds`] = seconds;\n    window[`${props.task.id}_${props.task.name}_isRunning`] = isRunning;\n    window.addEventListener('beforeunload', outFromWindow);\n    return () => {\n      return window.removeEventListener('beforeunload', outFromWindow);\n    };\n  }, [isRunning, seconds]);\n\n  /**\n   * hook para pausar la tarea si se desmonta el componente\n   */\n  useEffect(function () {\n    return () => {\n      const isRunning = window[`${props.task.id}_${props.task.name}_isRunning`];\n      const seconds = window[`${props.task.id}_${props.task.name}_seconds`];\n      if (isRunning) {\n        updateTasks({\n          id: props.task.id,\n          status: seconds ? 'paused' : 'finished',\n          durationRemaining: seconds\n        });\n      }\n      return true;\n    };\n  }, []);\n\n  /**\n   * Finaliza la tarea\n   */\n  async function finalizeTask () {\n    window.removeEventListener('beforeunload', outFromWindow);\n    const updated = await updateTasks({ id: props.task.id, status: 'finished', durationRemaining: seconds });\n    if (!updated.error) {\n      const newTask = props.task;\n      newTask.status = 'finished';\n      newTask.durationRemaining = seconds;\n      props.onFinishedTask(newTask, props.listName, 'tasksFinished'); // Tasks.js -> moveTask\n    }\n  }\n\n  return (\n    <>\n      {!!seconds && (\n        <>\n          <Button onClick={pauseStart} variant='dark' style={{ marginRight: '5px' }}>\n            {isRunning && (\n              <PauseIcon style={{ color: 'white', fontSize: '10px' }} />\n            )}\n            {!isRunning && (\n              <PlayIcon style={{ color: 'white', fontSize: '10px' }} />\n            )}\n          </Button>\n          <Button onClick={reset} variant='light' style={{ marginRight: '5px', padding: '3px' }} >\n            <RefreshIcon style={{ color: 'black', fontSize: '30px' }} />\n          </Button>\n          <Button variant='success' onClick={finalizeTask}>\n            Finalizar\n          </Button>\n        </>\n      )}\n      <Card.Text>\n        {!!seconds && (\n          <small className='text-muted'>tiempo restante: {utils().formatToMinutesSeconds(seconds)}</small>\n        )}\n        {!seconds && (\n          <small className='text-muted'>completada</small>\n        )}\n      </Card.Text>\n    </>\n  );\n}\n\nexport default TaskFieldTimer;\n"]},"metadata":{},"sourceType":"module"}