{"ast":null,"code":"var _jsxFileName = \"/Users/ramsses/Downloads/test/tasks/src/components/TaskList.js\";\nimport React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\nimport Task from './Task';\n\nclass TaskList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  reorder(list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n    return result;\n  }\n  /**\n   *\n   * @param {Object} result resultado de la libreria para reordenar\n   */\n\n\n  onDragEnd(result) {\n    if (!result.destination) {\n      return;\n    }\n\n    const tasks = this.reorder(this.props.tasks, result.source.index, result.destination.index);\n    this.props.onReorderedTasks(tasks, this.props.listName); // Tasks.js -> orderTasks\n  }\n\n  render() {\n    if (!this.props.tasks.length) {\n      return /*#__PURE__*/React.createElement(Alert, {\n        variant: \"dark\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Alert.Heading, {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }, \"Sin tareas por el momento.\"));\n    } else {\n      return /*#__PURE__*/React.createElement(DragDropContext, {\n        onDragEnd: this.onDragEnd,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Droppable, {\n        droppableId: \"droppable\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({}, provided.droppableProps, {\n        ref: provided.innerRef,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 15\n        }\n      }), this.props.tasks.map((task, index) => /*#__PURE__*/React.createElement(Draggable, {\n        key: task.id,\n        draggableId: String(task.id),\n        index: index,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 19\n        }\n      }, (provided, snapshot) => /*#__PURE__*/React.createElement(\"div\", Object.assign({\n        ref: provided.innerRef\n      }, provided.draggableProps, provided.dragHandleProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(Task, {\n        key: task.id,\n        task: task,\n        onDeletedTask: this.props.onDeletedTask,\n        onStartedTask: this.props.onStartedTask,\n        onFinishedTask: this.props.onFinishedTask,\n        removeFromTaskNotStarted: this.props.removeFromTaskNotStarted,\n        listName: this.props.listName,\n        filter: this.props.filter,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }\n      })))), provided.placeholder)));\n    }\n  }\n\n}\n\nexport default TaskList;","map":{"version":3,"sources":["/Users/ramsses/Downloads/test/tasks/src/components/TaskList.js"],"names":["React","Alert","DragDropContext","Droppable","Draggable","Task","TaskList","Component","constructor","props","state","onDragEnd","bind","reorder","list","startIndex","endIndex","result","Array","from","removed","splice","destination","tasks","source","index","onReorderedTasks","listName","render","length","textAlign","provided","snapshot","droppableProps","innerRef","map","task","id","String","draggableProps","dragHandleProps","onDeletedTask","onStartedTask","onFinishedTask","removeFromTaskNotStarted","filter","placeholder"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,eAAT,EAA0BC,SAA1B,EAAqCC,SAArC,QAAsD,qBAAtD;AAEA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,QAAN,SAAuBN,KAAK,CAACO,SAA7B,CAAuC;AACrCC,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa,EAAb;AAEA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACD;;AAEDC,EAAAA,OAAO,CAAEC,IAAF,EAAQC,UAAR,EAAoBC,QAApB,EAA8B;AACnC,UAAMC,MAAM,GAAGC,KAAK,CAACC,IAAN,CAAWL,IAAX,CAAf;AACA,UAAM,CAACM,OAAD,IAAYH,MAAM,CAACI,MAAP,CAAcN,UAAd,EAA0B,CAA1B,CAAlB;AACAE,IAAAA,MAAM,CAACI,MAAP,CAAcL,QAAd,EAAwB,CAAxB,EAA2BI,OAA3B;AAEA,WAAOH,MAAP;AACD;AAED;;;;;;AAIAN,EAAAA,SAAS,CAAEM,MAAF,EAAU;AACjB,QAAI,CAACA,MAAM,CAACK,WAAZ,EAAyB;AACvB;AACD;;AACD,UAAMC,KAAK,GAAG,KAAKV,OAAL,CACZ,KAAKJ,KAAL,CAAWc,KADC,EAEZN,MAAM,CAACO,MAAP,CAAcC,KAFF,EAGZR,MAAM,CAACK,WAAP,CAAmBG,KAHP,CAAd;AAKA,SAAKhB,KAAL,CAAWiB,gBAAX,CAA4BH,KAA5B,EAAmC,KAAKd,KAAL,CAAWkB,QAA9C,EATiB,CASwC;AAC1D;;AAEDC,EAAAA,MAAM,GAAI;AACR,QAAI,CAAC,KAAKnB,KAAL,CAAWc,KAAX,CAAiBM,MAAtB,EAA8B;AAC5B,0BACE,oBAAC,KAAD;AAAO,QAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD,CAAO,OAAP;AAAe,QAAA,KAAK,EAAE;AAAEC,UAAAA,SAAS,EAAE;AAAb,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCADF,CADF;AAKD,KAND,MAMO;AACL,0BACE,oBAAC,eAAD;AAAiB,QAAA,SAAS,EAAE,KAAKnB,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,SAAD;AAAW,QAAA,WAAW,EAAC,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACoB,QAAD,EAAWC,QAAX,kBACC,6CACMD,QAAQ,CAACE,cADf;AAEE,QAAA,GAAG,EAAEF,QAAQ,CAACG,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIG,KAAKzB,KAAL,CAAWc,KAAX,CAAiBY,GAAjB,CAAqB,CAACC,IAAD,EAAOX,KAAP,kBACpB,oBAAC,SAAD;AAAW,QAAA,GAAG,EAAEW,IAAI,CAACC,EAArB;AAAyB,QAAA,WAAW,EAAEC,MAAM,CAACF,IAAI,CAACC,EAAN,CAA5C;AAAuD,QAAA,KAAK,EAAEZ,KAA9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,CAACM,QAAD,EAAWC,QAAX,kBACC;AACE,QAAA,GAAG,EAAED,QAAQ,CAACG;AADhB,SAEMH,QAAQ,CAACQ,cAFf,EAGMR,QAAQ,CAACS,eAHf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAKE,oBAAC,IAAD;AACE,QAAA,GAAG,EAAEJ,IAAI,CAACC,EADZ;AAEE,QAAA,IAAI,EAAED,IAFR;AAGE,QAAA,aAAa,EAAE,KAAK3B,KAAL,CAAWgC,aAH5B;AAIE,QAAA,aAAa,EAAE,KAAKhC,KAAL,CAAWiC,aAJ5B;AAKE,QAAA,cAAc,EAAE,KAAKjC,KAAL,CAAWkC,cAL7B;AAME,QAAA,wBAAwB,EAAE,KAAKlC,KAAL,CAAWmC,wBANvC;AAOE,QAAA,QAAQ,EAAE,KAAKnC,KAAL,CAAWkB,QAPvB;AAQE,QAAA,MAAM,EAAE,KAAKlB,KAAL,CAAWoC,MARrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CAFJ,CADD,CAJH,EA0BGd,QAAQ,CAACe,WA1BZ,CAFJ,CADF,CADF;AAoCD;AACF;;AA7EoC;;AAgFvC,eAAexC,QAAf","sourcesContent":["import React from 'react';\nimport { Alert } from 'react-bootstrap';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nimport Task from './Task';\n\nclass TaskList extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {};\n\n    this.onDragEnd = this.onDragEnd.bind(this);\n  }\n\n  reorder (list, startIndex, endIndex) {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n  }\n\n  /**\n   *\n   * @param {Object} result resultado de la libreria para reordenar\n   */\n  onDragEnd (result) {\n    if (!result.destination) {\n      return;\n    }\n    const tasks = this.reorder(\n      this.props.tasks,\n      result.source.index,\n      result.destination.index\n    );\n    this.props.onReorderedTasks(tasks, this.props.listName); // Tasks.js -> orderTasks\n  }\n\n  render () {\n    if (!this.props.tasks.length) {\n      return (\n        <Alert variant='dark'>\n          <Alert.Heading style={{ textAlign: 'center' }}>Sin tareas por el momento.</Alert.Heading>\n        </Alert>\n      );\n    } else {\n      return (\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId='droppable'>\n            {(provided, snapshot) => (\n              <div\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {this.props.tasks.map((task, index) => (\n                  <Draggable key={task.id} draggableId={String(task.id)} index={index}>\n                    {(provided, snapshot) => (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.draggableProps}\n                        {...provided.dragHandleProps}\n                      >\n                        <Task\n                          key={task.id}\n                          task={task}\n                          onDeletedTask={this.props.onDeletedTask}\n                          onStartedTask={this.props.onStartedTask}\n                          onFinishedTask={this.props.onFinishedTask}\n                          removeFromTaskNotStarted={this.props.removeFromTaskNotStarted}\n                          listName={this.props.listName}\n                          filter={this.props.filter}\n                        />\n                      </div>\n                    )}\n                  </Draggable>\n                ))}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </DragDropContext>\n      );\n    }\n  }\n}\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}